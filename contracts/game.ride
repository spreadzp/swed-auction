{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let startRoundHeight = 5

func randomizer(inv: Invocation) = {
    let lastPlay = match getBinary(this, "lastPlay") {
        case s:ByteVector => s
        case a:Unit => base64'V2F2ZXNMb3R0b1Yy'
    }

    let rand = lastPlay + inv.transactionId + inv.callerPublicKey + lastBlock.generationSignature + toBytes(lastBlock.timestamp) + toBytes(lastBlock.height)
    sha256(rand)
}

func setWinnersPrevRound(currRound: Int, randhash: Int) = {
  let prevNumberRound = currRound - 1
  if (randhash > 500) then
    WriteSet([
      DataEntry("lastRoundWinner", prevNumberRound.toString() + "_more_" ),
      DataEntry("numberRound", currRound) ,
      DataEntry("startGame", true),
      DataEntry("randhash", randhash)
      ] 
    )  
  else  
    WriteSet([
      DataEntry("lastRoundWinner", prevNumberRound.toString() + "_less_" ),
      DataEntry("numberRound", currRound),
      DataEntry("startGame", true),
      DataEntry("randhash", randhash)
        ]
    ) 
}

func getCurrentNumberRound() = {
  match getInteger(this, "numberRound") { 
        case a:Int => a
        case _ => 1
      } 
}
func getGamerBet(addressGamer: String, direction: String, currentRound: Int) = {
  match getString(this, currentRound.toString() + "_" + direction + "_" + addressGamer) { 
        case g:String => g
        case _ => ""
  } 
}

func setGamerBet(addressGamer: String, directionRate: String, directionGamer: String, currentBet: Int) = {
   let currentRound = getCurrentNumberRound()
   let newNumberOfRound = match getInteger(this, "numberRound") { 
      case a:Int => a
      case _ => 1
    }
    let numOfGamersCurrDirection = match getInteger(this, newNumberOfRound.toString() + directionGamer) { 
      case g:Int => g
      case _ => 0
    }
    let numberOfGame = match getInteger(this, "numberGame") { 
      case g:Int => g
      case _ => 0
    }
    let sumOfBank = match getInteger(this, numberOfGame.toString() + "_bankOfGame") { 
      case g:Int => g
      case _ => 0
    }
    let sumGamerBets = match getInteger(this, numberOfGame.toString() + "_" + addressGamer) { 
      case s:Int => s
      case _ => 0
    }  
    WriteSet([
      DataEntry(currentRound.toString() + directionRate + addressGamer, currentBet),
      DataEntry(currentRound.toString() + directionGamer, numOfGamersCurrDirection + 1),
      DataEntry(numberOfGame.toString() + "_bankOfGame", sumOfBank + currentBet),
      DataEntry(numberOfGame.toString() + "_" + addressGamer, sumGamerBets + currentBet)
      ]) 
}

func getBet(round: Int, addressGamer: String) =  {
  let minBet = 100000000
  if(round > 1 ) then { 
    let winnerOfPrevRound = match getString(this, "lastRoundWinner") {
      case w: String => w
      case _ => ""

    }
    let winnerBetFromPrevRound = match getInteger(this, winnerOfPrevRound + addressGamer) {
      case w: Int => w
      case _ => 0
    }

    if(winnerBetFromPrevRound == 0) then 
      minBet * round * 2
    else 
      minBet
  } 
  else 
    minBet
}

func isOppositeRate() = {
  let newNumberOfRound = match getInteger(this, "numberRound") { 
      case a:Int => a
      case _ => 1
    }
    let numberOfGamersUp = match getInteger(this, newNumberOfRound.toString() + "_countGamersUp") { 
      case g:Int => g
      case _ => 0
    }
    let numberOfGamersDown = match getInteger(this, newNumberOfRound.toString() + "_countGamersDown") { 
      case g:Int => g
      case _ => 0
    }
    numberOfGamersUp > 0 && numberOfGamersDown > 0
}

func getNextNumberGame() = {
  match getInteger(this, "numberGame") { 
    case a:Int => a + 1
    case _ => 1
  }
}

@Callable(i)
func startRound() = {
  let newNumberOfRound = match getInteger(this, "numberRound") { 
    case a:Int => a + 1
    case _ => 1
  }
  let randhash = randomizer(i)
  let isGameStarted = match getBoolean(this, "startGame") {
    case g:Boolean => g
    case _ => false
  }
  if(i.caller != this) then
    throw("Only owner can start the game.") 
  else if(newNumberOfRound == 8 && i.caller == this && !isGameStarted) then    
    let newNumberGame = getNextNumberGame()
    WriteSet([
      DataEntry("numberGame", newNumberGame),
      DataEntry("startGame", !isGameStarted),
      DataEntry("numberRound", 1),
      DataEntry(newNumberGame.toString() + "_bankOfGame", 0)
      ]) 
  else if (newNumberOfRound > 1 && i.caller == this && !isGameStarted) then 
    setWinnersPrevRound(newNumberOfRound, randhash.toInt() % 1000)
  else if (newNumberOfRound == 1 && i.caller == this && !isGameStarted) then 
    WriteSet([
      DataEntry("numberGame", 1),
      DataEntry("startGame", !isGameStarted),
      DataEntry("numberRound", 1),
      DataEntry(1.toString() + "_bankOfGame", 0)
      ])    
  else
    throw("Same error.")  
} 

@Callable(i)
func stopGame() = {
  let isGameStarted = match getBoolean(this, "startGame") {
    case g:Boolean => g
    case _ => false
  } 
  if(isOppositeRate() && i.caller == this && isGameStarted) then
    WriteSet([
      DataEntry("startGame", !isGameStarted)
    ])
  else
    throw("Only owner can start the game.")  
} 

@Callable(i)
func makeBetLess() = {
  let isGameStarted = match getBoolean(this, "startGame") {
    case g:Boolean => g
    case _ => false
  } 
  let pmt = extract(i.payment)
  let addressGamer = toBase58String(i.caller.bytes)
  let currentRound = getCurrentNumberRound()
  let countBet = getBet(currentRound, addressGamer)

  if (getGamerBet(addressGamer, "more", currentRound) != "" ) then 
    throw("The gamer already made opposite a bet in the round!")  
  else if(countBet > pmt.amount) then 
    throw("Payment must be more for the round!" + countBet.toString() + pmt.amount.toString())  
  else if (!isDefined(pmt.assetId) && countBet <= pmt.amount && isGameStarted) then    
    setGamerBet(addressGamer, "_less_", "_countGamersDown", pmt.amount)  
  else
    throw("works with waves only")
}

@Callable(i)
func makeBetMore() = {
  let isGameStarted = match getBoolean(this, "startGame") {
    case g:Boolean => g
    case _ => false
  } 
  let pmt = extract(i.payment)
  let addressGamer = toBase58String(i.caller.bytes)
  let currentRound = getCurrentNumberRound()
  let countBet = getBet(currentRound, addressGamer)
  
  if (getGamerBet(addressGamer, "less", currentRound) != "" ) then 
    throw("The gamer already made opposite bet in the round!")
  else if(countBet > pmt.amount) then
    throw("Payment must be more for the round!" + countBet.toString() + pmt.amount.toString())
  else if (!isDefined(pmt.assetId) && countBet <= pmt.amount && isGameStarted) then
    setGamerBet(addressGamer, "_more_", "_countGamersUp", pmt.amount) 
  else
    throw("works with waves only")
}
